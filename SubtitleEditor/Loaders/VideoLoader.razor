@using FFmpegBlazor
@inject IJSRuntime Runtime
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
<div style="align-content: center">
    <center>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context.Id">
                    Upload File
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (converting)
        {
            <div style="width: 100%">
                <span>Loading video...</span>
            </div>
        }
        @if (previewURL != "")
        {
            <video width="100%" height="200px" autoplay controls src="@previewURL" />
        }
        <h1>@Title</h1>
    </center>
</div>

@code {
    [Parameter]
    public EventCallback<GetFFMPegArgs> GetFFMPEG { get; set; }
    [Parameter]
    public string Title { get; set; } = "Video Title";
    public VideoMedia SelectedVideo { get; set; } = new VideoMedia();
    string previewURL { get; set; } = "";

    bool converting = false;
    public class GetFFMPegArgs
    {
        public FFMPEG ff;
    }
    protected override async Task OnInitializedAsync()
    {
    }

    public async Task UploadFiles(IBrowserFile file)
    {
        converting = true;
        //read all bytes
        using var stream = file.OpenReadStream(100000000); //Max size for file that can be read
        var inputFileDataBuffer = new byte[file.Size];

        //read all bytes
        await stream.ReadAsync(inputFileDataBuffer);

        var gff = new GetFFMPegArgs();
        await GetFFMPEG.InvokeAsync(gff);
        var ff = gff.ff;

        //create a video link from buffer to that video can be played
        SelectedVideo.FFVideoName = Title + ".mp4";
        previewURL = FFmpegFactory.CreateURLFromBuffer(inputFileDataBuffer, SelectedVideo.FFVideoName, file.ContentType);
        converting = false;

        StateHasChanged();
    }
}

@page "/"
@using MudBlazor
@using SkiaSharp.Views.Blazor
@using SubtitleEditor.SectionDef
<PageTitle>Home</PageTitle>

<MudGrid>
	<MudItem xs="8">
		<MudPaper Class="d-flex object-center mud-width-full">
			<SkiaSharp.Views.Blazor.SKGLView @ref=renderPreview
											 IgnorePixelScaling="true"
											 OnPaintSurface="OnRenderPaint"
											 style="width: 100%; height: 70vh;margin: 0px 0px 0px 0px;"></SkiaSharp.Views.Blazor.SKGLView>
		</MudPaper>
	</MudItem>
	<MudItem xs="4">
		<MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-2">
			@if (ClipUnderEditing is SubtitleClip)
			{
				<SubtitleEditor.Editors.SubtitleClipEditor 
				OnAChange="SubtitleEditorOnAChange"
				Text ="@SubtitleEditorText" 
				StartingHH="@SubtitleEditorStartingHH" 
				StartingMM="@SubtitleEditorStartingMM" 
				StartingSS="@SubtitleEditorStartingSS" 
				StartingFF="@SubtitleEditorStartingFF" 
				DurationHH="@SubtitleEditorDurationHH" 
				DurationMM="@SubtitleEditorDurationMM" 
				DurationSS="@SubtitleEditorDurationSS" 
				DurationFF="@SubtitleEditorDurationFF" 
				></SubtitleEditor.Editors.SubtitleClipEditor>
			}
		</MudPaper>
	</MudItem>
</MudGrid>

<div class="row" style="height: 5vh;">
<h2>@CurrentTime</h2>
</div>
<div style="width: 100%; height: 25vh;">
<SectionBarWebControl 
	@ref=sectionBarControl
	SeekUpdate="SeekUpdate"
	EditClip="EditClipRequest"
	></SectionBarWebControl>
</div>

@* <TimelineContainer></TimelineContainer> *@

@code{
	SectionBarWebControl sectionBarControl { get; set; }
	Clip ClipUnderEditing;
	SubtitleEditor.Editors.SubtitleClipEditor subtitleEditor;
	public SKGLView renderPreview { get; set; }
	public string CurrentTime {get;set;} = "";
	public void SeekUpdate(double t){
		CurrentTime = common.timeToString(t);
		renderPreview.Invalidate();
	}

	protected void OnRenderPaint(SKPaintGLSurfaceEventArgs e)
	{
		var canvas = e.Surface.Canvas;
		canvas.Clear();
		float aspect = 16 / 9.0F;
		var width = (float)e.Info.Width;
		var height = (float)(e.Info.Width / aspect);
		if (height > e.Info.Height)
		{
			height = e.Info.Height;
			width = (float)(height * aspect);
		}

		canvas.Translate((e.Info.Width - width) / 2, (e.Info.Height - height) / 2);
		e.Surface.Canvas.DrawRect(0, 0, width, height, new SkiaSharp.SKPaint()
			{
				IsStroke = true,
				StrokeWidth = 2,
				Color = SkiaSharp.SKColors.Gray
			});
		float scale = width / 100;
		e.Surface.Canvas.Scale(scale, scale);

		sectionBarControl.RenderCurrentFrame(
			e.Surface.Canvas, new RenderConfig()
				{
					TargetSize = new SkiaSharp.SKSize() { Width = width, Height = height },
					AspectRatio = aspect,
					SubTitlesFont = new SkiaSharp.SKFont(SkiaSharp.SKTypeface.FromFamilyName("ARIAL")) { Size = 10 },
					SubtitleColor = SkiaSharp.SKColors.Black,
					SubtitleLocation = new SkiaSharp.SKPoint(50, 50 / aspect)
				});
		e.Surface.Canvas.Scale(1 / scale, 1 / scale);
		canvas.Translate(-(e.Info.Width - width) / 2, -(e.Info.Height - height) / 2);
	}


	string SubtitleEditorText { get; set; }
	double SubtitleEditorTime{get;set;}
	double SubtitleEditorStartingHH{get;set;}
	double SubtitleEditorStartingMM{get;set;}
	double SubtitleEditorStartingSS{get;set;}
	double SubtitleEditorStartingFF{get;set;}
	double SubtitleEditorDurationHH{get;set;}
	double SubtitleEditorDurationMM{get;set;}
	double SubtitleEditorDurationSS{get;set;}
	double SubtitleEditorDurationFF{get;set;}
	public void EditClipRequest(Clip clip){
		ClipUnderEditing = clip;
		if (clip == null)
			return;
		SubtitleEditorText = ClipUnderEditing.Source;
		SubtitleEditorStartingHH = (int)(ClipUnderEditing.Start / 3600);
		SubtitleEditorStartingMM = (int)(ClipUnderEditing.Start / 60);
		SubtitleEditorStartingSS = (int)(ClipUnderEditing.Start);
		SubtitleEditorStartingFF = (ClipUnderEditing.Start - (int)(ClipUnderEditing.Start)) * 30;
		var duration = ClipUnderEditing.End - ClipUnderEditing.Start;
		SubtitleEditorDurationHH = (int)(duration / 3600);
		SubtitleEditorDurationMM = (int)(duration / 60);
		SubtitleEditorDurationSS = (int)(duration);
		SubtitleEditorDurationFF = (duration - (int)(duration)) * 30;
	}
	public void SubtitleEditorOnAChange(SubtitleEditor.Editors.SubtitleClipEditor SubtitleEditor)
	{

		if (ClipUnderEditing == null)
			return;
		if (ClipUnderEditing is SubtitleClip)
		{
			ClipUnderEditing.Source = SubtitleEditor.Text;
			double duration(double h, double m, double s, double f)
			{
				return h * 3600 + m * 60 + s + f / 30;
			}
			ClipUnderEditing.Start = duration(
				SubtitleEditor.StartingHH,
				SubtitleEditor.StartingMM,
				SubtitleEditor.StartingSS,
				SubtitleEditor.StartingFF);
			ClipUnderEditing.End = ClipUnderEditing.Start + duration(
				SubtitleEditor.DurationHH,
				SubtitleEditor.DurationMM,
				SubtitleEditor.DurationSS,
				SubtitleEditor.DurationFF);
			SubtitleEditorText = SubtitleEditor.Text;
			SubtitleEditorStartingHH = SubtitleEditor.StartingHH;
			SubtitleEditorStartingMM = SubtitleEditor.StartingMM;
			SubtitleEditorStartingSS = SubtitleEditor.StartingSS;
			SubtitleEditorStartingFF = SubtitleEditor.StartingFF;
			SubtitleEditorDurationHH = SubtitleEditor.DurationHH;
			SubtitleEditorDurationMM = SubtitleEditor.DurationMM;
			SubtitleEditorDurationSS = SubtitleEditor.DurationSS;
			SubtitleEditorDurationFF = SubtitleEditor.DurationFF;
			sectionBarControl.Invalidate();
			renderPreview.Invalidate();
		}
	}
}
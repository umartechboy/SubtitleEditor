@page "/"
@using MudBlazor
@using MudBlazor.Utilities
@using SkiaSharp.Views.Blazor
@using SubtitleEditor.SectionDef
<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="8">
        <MudItem xs="12" Class="my-2">
		    <MudPaper Class="d-flex object-center mud-width-full">
			    <SkiaSharp.Views.Blazor.SKGLView @ref=renderPreview
											     IgnorePixelScaling="true"
											     OnPaintSurface="OnRenderPaint"
											     style="width: 100%; height: 70vh;margin: 0px 0px 0px 0px;"></SkiaSharp.Views.Blazor.SKGLView>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
		    <MudPaper Class="d-flex object-center mud-width-full">
                <div style="width: 100%; height: 25vh;">
                    <SectionBarWebControl @ref=sectionBarControl
                                          SeekUpdate="SeekUpdate"
                                          RenderPreview="@RenderPreview"
                                          EditClip="EditClipRequest"></SectionBarWebControl>
                </div>
            </MudPaper>
        </MudItem>
	</MudItem>
    
	<MudItem xs="4">
        <MudItem xs="12" Class="my-2">
			<div class="row" style="height: 5vh;">
				<h2>@CurrentTime</h2>
			</div>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-2">
                @if (ClipUnderEditing is SubtitleClip)
                {
                    <SubtitleEditor.Editors.SubtitleClipEditor 
                    OnAChange="SubtitleEditorOnAChange"
                    Text="@ClipEditorSource"
                    FontFamily="@SubtitleEditorFontFamily"
                    TypeFaces="@TypeFaces"
                    FontSize="@SubtitleEditorFontSize"
                    YPosition="@SubtitleEditorYPosition"
                    ShadowSize="@SubtitleEditorShadowSize"
                    ShadowDistance="@SubtitleEditorShadowDistance"
                    TextColor="@SubtitleEditorTextColor"
                    ShadowColor="@SubtitleEditorShadowColor"
                    Overlap="@SubtitleEditorOverlap"
                    StartingHH="@ClipEditorStartingHH"
                    StartingMM="@ClipEditorStartingMM"
                    StartingSS="@ClipEditorStartingSS"
                    StartingFF="@ClipEditorStartingFF"
                    DurationHH="@ClipEditorDurationHH"
                    DurationMM="@ClipEditorDurationMM"
                    DurationSS="@ClipEditorDurationSS"
                    DurationFF="@ClipEditorDurationFF"></SubtitleEditor.Editors.SubtitleClipEditor>
                }
                @if (ClipUnderEditing is PhotoClip)
                {
                    
                    <SubtitleEditor.Editors.PhotoClipEditor 
                    OnAChange="PhotoEditorOnAChange"
                    SelectedImage="@ClipEditorSource"
                    SelectedImageData="@PhotoEditorData"
                    Size="PhotoEditorSize"
                    XPosition="PhotoEditorXPosition"
                    YPosition="PhotoEditorYPosition"
                    StartingHH="@ClipEditorStartingHH"
                    StartingMM="@ClipEditorStartingMM"
                    StartingSS="@ClipEditorStartingSS"
                    StartingFF="@ClipEditorStartingFF"
                    DurationHH="@ClipEditorDurationHH"
                    DurationMM="@ClipEditorDurationMM"
                    DurationSS="@ClipEditorDurationSS"
                    DurationFF="@ClipEditorDurationFF"></SubtitleEditor.Editors.PhotoClipEditor>
                }
            </MudPaper>
        </MudItem>
	</MudItem>
</MudGrid>

@* <TimelineContainer></TimelineContainer> *@
@inject HttpClient HTTP
@code{
    SectionBarWebControl sectionBarControl { get; set; }
    public SKGLView renderPreview { get; set; }
    public string CurrentTime {get;set;} = "";
    static RenderConfig config;
    public List<SkiaSharp.SKTypeface> TypeFaces { get; set; }
    protected override void OnInitialized()
    {
        config = new RenderConfig()
			{
				SubTitlesFont = new SkiaSharp.SKFont(SkiaSharp.SKTypeface.FromFamilyName("Roboto")) { Size = 10 },
				SubtitleColor = SkiaSharp.SKColors.Black,
				ShadowColor = SkiaSharp.SKColors.Blue,
				AspectRatio = 16 / 9.0F,
				ShadowSize = 3,
				ShadowDistance = 4,
				SubtitleLocation = new SkiaSharp.SKPoint(50, 50 * 9 / 16.0F)
			};
    }
    protected override async Task OnInitializedAsync()
    {
        TypeFaces = new List<SkiaSharp.SKTypeface>();
        var availableFont = new string[] {
		"fonts/Jersey15-Regular.ttf",
		"fonts/Anton-Regular.ttf"
	};
        foreach (var font in availableFont)
        {
            var bytes = await HTTP.GetByteArrayAsync(font);
            var ms = new MemoryStream(bytes);
            TypeFaces.Add(SkiaSharp.SKFontManager.Default.CreateTypeface(ms));
        }
        config.SubTitlesFont = new SkiaSharp.SKFont(TypeFaces.First());
        SubtitleEditorFontFamily = config.SubTitlesFont.Typeface.FamilyName;
    }
    public void SeekUpdate(double t){
        CurrentTime = common.timeToString(t);
        renderPreview.Invalidate();
    }
    void RenderPreview()
    {
        renderPreview.Invalidate();
    }

    protected void OnRenderPaint(SKPaintGLSurfaceEventArgs e)
    {
        var canvas = e.Surface.Canvas;
        canvas.Clear();
        var width = (float)e.Info.Width;
        var height = (float)(e.Info.Width / config.AspectRatio);
        if (height > e.Info.Height)
        {
            height = e.Info.Height;
            width = (float)(height * config.AspectRatio);
        }

        canvas.Translate((e.Info.Width - width) / 2, (e.Info.Height - height) / 2);
        e.Surface.Canvas.DrawRect(0, 0, width, height, new SkiaSharp.SKPaint()
			{
				IsStroke = true,
				StrokeWidth = 2,
				Color = SkiaSharp.SKColors.Gray
			});
        float scale = width / 100;
        e.Surface.Canvas.Scale(scale, scale);

        config.TargetSize = new SkiaSharp.SKSize() { Width = width, Height = height };

        sectionBarControl.RenderCurrentFrame(
            e.Surface.Canvas, config);
        e.Surface.Canvas.Scale(1 / scale, 1 / scale);
        canvas.Translate(-(e.Info.Width - width) / 2, -(e.Info.Height - height) / 2);
    }
    //Common Clip Editing
    Clip ClipUnderEditing;

    public void EditClipRequest(Clip clip)
    {
        ClipUnderEditing = clip;
        if (clip == null)
            return;
        if (clip is SubtitleClip)
        {
            ClipEditorSource = ClipUnderEditing.Source;
            SubtitleEditorFontFamily = config.SubTitlesFont.Typeface.FamilyName;
            SubtitleEditorFontSize = config.SubTitlesFont.Size;
            SubtitleEditorYPosition = (float)(config.SubtitleLocation.Y * config.AspectRatio);
            SubtitleEditorShadowSize = config.ShadowSize;
            SubtitleEditorShadowDistance = config.ShadowDistance;
            SubtitleEditorTextColor = SKColorToMud(config.SubtitleColor);
            SubtitleEditorShadowColor = SKColorToMud(config.ShadowColor);
            SubtitleEditorOverlap = config.SubtitleOverlap;
            ClipEditorStartingHH = (int)(ClipUnderEditing.Start / 3600);
            ClipEditorStartingMM = (int)(ClipUnderEditing.Start / 60);
            ClipEditorStartingSS = (int)(ClipUnderEditing.Start);
            ClipEditorStartingFF = (ClipUnderEditing.Start - (int)(ClipUnderEditing.Start)) * 30;
            var duration = ClipUnderEditing.End - ClipUnderEditing.Start;
            ClipEditorDurationHH = (int)(duration / 3600);
            ClipEditorDurationMM = (int)(duration / 60);
            ClipEditorDurationSS = (int)(duration);
            ClipEditorDurationFF = (duration - (int)(duration)) * 30;
        }
        else if(clip is PhotoClip)
        {
            var photoClip = (PhotoClip)ClipUnderEditing;
            ClipEditorSource = photoClip.Source;
            PhotoEditorData = photoClip.Data;
            PhotoEditorSize = photoClip.Size;
            PhotoEditorXPosition = photoClip.X;
            PhotoEditorYPosition = photoClip.Y;
            ClipEditorStartingHH = (int)(ClipUnderEditing.Start / 3600);
            ClipEditorStartingMM = (int)(ClipUnderEditing.Start / 60);
            ClipEditorStartingSS = (int)(ClipUnderEditing.Start);
            ClipEditorStartingFF = (ClipUnderEditing.Start - (int)(ClipUnderEditing.Start)) * 30;
            var duration = ClipUnderEditing.End - ClipUnderEditing.Start;
            ClipEditorDurationHH = (int)(duration / 3600);
            ClipEditorDurationMM = (int)(duration / 60);
            ClipEditorDurationSS = (int)(duration);
            ClipEditorDurationFF = (duration - (int)(duration)) * 30;
        }
    }

    // Subtitle Clip Editor

    string ClipEditorSource { get; set; }
    string SubtitleEditorFontFamily { get; set; }
    float SubtitleEditorFontSize { get; set; }
    float SubtitleEditorYPosition { get; set; }
    float SubtitleEditorShadowSize { get; set; }
    float SubtitleEditorShadowDistance { get; set; }
    MudColor SubtitleEditorTextColor { get; set; }
    MudColor SubtitleEditorShadowColor { get; set; }
    double SubtitleEditorOverlap { get; set; }
    double ClipEditorStartingHH {get;set;}
    double ClipEditorStartingMM {get;set;}
    double ClipEditorStartingSS {get;set;}
    double ClipEditorStartingFF {get;set;}
    double ClipEditorDurationHH {get;set;}
    double ClipEditorDurationMM {get;set;}
    double ClipEditorDurationSS {get;set;}
    double ClipEditorDurationFF { get; set; }

    SkiaSharp.SKColor MudColorToSK(MudColor mud)
    {
        return new SkiaSharp.SKColor(mud.R, mud.G, mud.B, mud.A);
    }
    MudColor SKColorToMud(SkiaSharp.SKColor sk)
    {
        return new MudColor(sk.Red, sk.Green, sk.Blue, sk.Alpha);
    }
    public void SubtitleEditorOnAChange(SubtitleEditor.Editors.SubtitleClipEditor subtitleEditor)
    {

        if (ClipUnderEditing == null)
            return;
        if (ClipUnderEditing is SubtitleClip)
        {
            ClipUnderEditing.Source = subtitleEditor.Text;
            config.SubTitlesFont = new SkiaSharp.SKFont(TypeFaces.Find(tf => tf.FamilyName == subtitleEditor.FontFamily), subtitleEditor.FontSize);
            config.SubtitleLocation = new SkiaSharp.SKPoint(config.SubtitleLocation.X, subtitleEditor.YPosition / config.AspectRatio);
            config.ShadowSize = subtitleEditor.ShadowSize;
            config.ShadowDistance = subtitleEditor.ShadowDistance;
            config.SubtitleOverlap = (float)subtitleEditor.Overlap;
            config.SubtitleColor = MudColorToSK(subtitleEditor.TextColor);
            config.ShadowColor = MudColorToSK(subtitleEditor.ShadowColor);
            double duration(double h, double m, double s, double f)
            {
                return h * 3600 + m * 60 + s + f / 30;
            }
            ClipUnderEditing.Start = duration(
                subtitleEditor.StartingHH,
                subtitleEditor.StartingMM,
                subtitleEditor.StartingSS,
                subtitleEditor.StartingFF);
            ClipUnderEditing.End = ClipUnderEditing.Start + duration(
                subtitleEditor.DurationHH,
                subtitleEditor.DurationMM,
                subtitleEditor.DurationSS,
                subtitleEditor.DurationFF);
            ClipEditorSource = subtitleEditor.Text;

            // Round 2
            SubtitleEditorFontFamily = config.SubTitlesFont.Typeface.FamilyName;
            SubtitleEditorFontSize = config.SubTitlesFont.Size;
            SubtitleEditorYPosition = config.SubtitleLocation.Y * config.AspectRatio;
            SubtitleEditorShadowSize = config.ShadowSize;
            SubtitleEditorShadowDistance = config.ShadowDistance;
            SubtitleEditorShadowColor = SKColorToMud(config.ShadowColor);
            SubtitleEditorOverlap = config.SubtitleOverlap;
            ClipEditorStartingHH = subtitleEditor.StartingHH;
            ClipEditorStartingMM = subtitleEditor.StartingMM;
            ClipEditorStartingSS = subtitleEditor.StartingSS;
            ClipEditorStartingFF = subtitleEditor.StartingFF;
            ClipEditorDurationHH = subtitleEditor.DurationHH;
            ClipEditorDurationMM = subtitleEditor.DurationMM;
            ClipEditorDurationSS = subtitleEditor.DurationSS;
            ClipEditorDurationFF = subtitleEditor.DurationFF;
            sectionBarControl.Invalidate();
            renderPreview.Invalidate();
        }
    }

    // Photo Clip Editor

    protected SkiaSharp.SKBitmap PhotoEditorData { get; set; }
    protected float PhotoEditorSize { get; set; }
    protected float PhotoEditorXPosition {get; set; }
    protected float PhotoEditorYPosition { get; set; }
    public void PhotoEditorOnAChange(SubtitleEditor.Editors.PhotoClipEditor photoEditor)
    {
        if (ClipUnderEditing == null)
            return;
        if (ClipUnderEditing is PhotoClip)
        {
            var photoClip = (PhotoClip)ClipUnderEditing;
            photoClip.Source = photoEditor.SelectedImage;
            photoClip.Data = photoEditor.SelectedImageData;
            photoClip.Size = photoEditor.Size;
            photoClip.X = photoEditor.XPosition;
            photoClip.Y = photoEditor.YPosition;
            double duration(double h, double m, double s, double f)
            {
                return h * 3600 + m * 60 + s + f / 30;
            }
            ClipUnderEditing.Start = duration(
                photoEditor.StartingHH,
                photoEditor.StartingMM,
                photoEditor.StartingSS,
                photoEditor.StartingFF);
            ClipUnderEditing.End = ClipUnderEditing.Start + duration(
                photoEditor.DurationHH,
                photoEditor.DurationMM,
                photoEditor.DurationSS,
                photoEditor.DurationFF);

            // Round 2
            ClipEditorSource = photoEditor.SelectedImage;
            PhotoEditorData = photoEditor.SelectedImageData;
            PhotoEditorSize = photoEditor.Size;
            PhotoEditorXPosition = photoEditor.XPosition;
            PhotoEditorYPosition = photoEditor.YPosition;
            ClipEditorStartingHH = photoEditor.StartingHH;
            ClipEditorStartingMM = photoEditor.StartingMM;
            ClipEditorStartingSS = photoEditor.StartingSS;
            ClipEditorStartingFF = photoEditor.StartingFF;
            ClipEditorDurationHH = photoEditor.DurationHH;
            ClipEditorDurationMM = photoEditor.DurationMM;
            ClipEditorDurationSS = photoEditor.DurationSS;
            ClipEditorDurationFF = photoEditor.DurationFF;
            sectionBarControl.Invalidate();
            renderPreview.Invalidate();
        }
    }

}
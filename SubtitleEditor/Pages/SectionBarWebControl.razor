@using SkiaSharp.Views.Blazor
@using SkiaSharp
@using SubtitleEditor.SectionDef
<div style="width: 100%; height: 100%; cursor:@Cursor"
	@onmousemove:stopPropagation="true"
	@onmousedown:preventDefault="true"
	@onmouseup:preventDefault="true"
	@onmouseenter:preventDefault="true"
	@onmouseleave:preventDefault="true"
	@onclick:preventDefault="true">
	<SKGLView @ref=skView 
			  style="width: 100%; height: 100%;"
			  OnPaintSurface="OnPaint"
			  IgnorePixelScaling="true"
			  @onmousemove="OnMouseMove"
			  @onmousedown="OnMouseDown"
			  @onmouseup="OnMouseUp"
			  @onmouseenter="OnMouseEnter"
			  @onmouseleave="OnMouseLeave"
			  @onclick="OnClick"			  
	></SKGLView>
</div>
@code {
	[Parameter]
	public SKColor BackgroundColor { get; set; } = SKColors.Gray;
	[Parameter]
	public EventCallback<double> SeekUpdate { get; set; }
	[Parameter]
	public double SeekPosition { get; set; }
	[Parameter]
	public EventCallback<Clip> EditClip { get; set; }
	[Parameter]
	public EventCallback RenderPreview { get; set; }

	protected SKGLView skView = null;
	protected SectionBar sectionBar;
	protected string Cursor = "auto";

	SKPoint lastMove;

	protected override void OnInitialized()
	{
		sectionBar = new SectionBar(()=> skView?.Invalidate(), 5);
		sectionBar.SeekPointChanged += async (s, e) => {
			SeekPosition = e.Value;
			await SeekUpdate.InvokeAsync(e.Value); 
		};
		sectionBar.OnRequestToRenderPreview += async (s, e) => await RenderPreview.InvokeAsync();
		sectionBar.OnClipEditRequest += async (s, e) => await EditClip.InvokeAsync(e.Clip);
		sectionBar.Layers[0].Add(new SubtitleClip(10, 30, "Hello, world"));
		sectionBar.Layers[0].Add(new SubtitleClip(30, 40, "ABCD"));
		sectionBar.Layers[1].Add(new SubtitleClip(25, 35, "ABCD"));
		sectionBar.Layers[2].Add(new PhotoClip(15, 50));
		sectionBar.DiableDefaultEmptySectionStrip = false;
		sectionBar.DiableDefaultSectionGroupStrip = false;
		sectionBar.DiableDefaultSectionStrip = false;
		sectionBar.Maximum = 120D;
		sectionBar.Minimum = 0D;
		sectionBar.MultiSelection = false;
		sectionBar.SeekPosition = 0D;
		sectionBar.ZoomEnd = 120D;
		sectionBar.ZoomStart = 0D;

		sectionBar.OnDebug += (s, e) => Console.WriteLine(e.Message);

	}
	protected void OnPaint(SKPaintGLSurfaceEventArgs e)
	{
		var canvas = e.Surface.Canvas;
		sectionBar.Width = e.Info.Width;
		sectionBar.Height = e.Info.Height;

		canvas.Clear(BackgroundColor);
		// Draw debug rect
		canvas.DrawRect(lastMove.X, lastMove.Y, 10, 10, new SKPaint()
			{
				Typeface = SKTypeface.FromFamilyName("ARIAL"),
				Color = SKColors.White,
			});

		if (sectionBar != null)
			sectionBar.OnPaint(e);	
	}
	public void OnMouseMove(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		lastMove = new SKPoint((float)e.OffsetX, (float)e.OffsetY);
		sectionBar.NotifyMouseMove(new SectionDef.MouseEventArgs(e));
	}
	public void OnMouseDown(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		sectionBar.NotifyMouseDown(new SectionDef.MouseEventArgs(e));
	}
	public void OnMouseUp(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		sectionBar.NotifyMouseUp(new SectionDef.MouseEventArgs(e));
	}
	public void OnMouseEnter(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		sectionBar.NotifyMouseEnter(new SectionDef.MouseEventArgs(e));
	}
	public void OnMouseLeave(Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
	{
		sectionBar.NotifyMouseLeave(new SectionDef.MouseEventArgs(e));
	}
	public void OnClick(EventArgs e)
	{
		sectionBar.NotifyMouseClick(new SectionDef.MouseEventArgs()
			{
				Location = new System.Drawing.Point((int)Math.Round(lastMove.X), (int)Math.Round(lastMove.Y)),
				Clicks = 1,
				Button = MouseButtons.Left
			});
	}
	public void RenderFrame(double position, SKCanvas canvas, RenderConfig config)
	{
		sectionBar.RenderFrame(position, canvas, config);
	}
	public void RenderCurrentFrame(SKCanvas canvas, RenderConfig config)
	{
		sectionBar.RenderFrame(SeekPosition, canvas, config);
	}
	public void Invalidate()
	{
		sectionBar.Invalidate();
	}
}